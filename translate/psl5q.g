#  File converted from Magma code -- requires editing and checking
#  Magma -> GAP converter, version 0.43, 4/04/16 by AH

#  Global Variables used: Append, CoprimeMaximals, CoprimeWhichGroup, Eltseq,
#  FPGroupStrong, Factorisation, GL, Gcd, Generators, Identity, IsEven, IsOdd,
#  IsPrime, Ngens, NonCoprimeMaximals, NonCoprimeWhichGroup, Order, Random,
#  RandomSchreier, SL, SO, SU, proj

#  Defines: CoprimeMaximals, CoprimeWhichGroup, L5qIdentify,
#  NonCoprimeMaximals, NonCoprimeWhichGroup

DeclareGlobalFunction("L5qIdentify@");

#  
#  This file contains functions called:
#  CoprimeWhichGroup(group, p, e)
#  NonCoprimeWhichGroup(group, p, e)
#  CoprimeMaximals(group, p, e)
#  NonCoprimeMaximals(group, p, e)
#  L5qIdentify(group, q)

#  **************************************************************
#  **************************************************************
#  says in the case (p^e-1, 5) = 1 whether input group contains
#  duality automorphism
CoprimeWhichGroup@:=function(quot,groupquot,phi)
local is_novelty;
  is_novelty:=not IsSubset(SubStructure(quot,phi),groupquot);
  return is_novelty;
end;
;
#  **************************************************************
#  **************************************************************
#   is_novelty if it contains duality; i.e. if it's not contained in
#  * the NORMAL subgroup generated by <delta, phi>.
#  * the point stabiliser is <phi, iota> (and all it's conjugates)
#  * the kernel is <phi>              if p = 1 (5)
#  * the kernel is <phi^4, phi^2iota> if p = 2,3 (5)
#  * the kernel is <phi^2, phi*iota>  if p = 4 (5)
#  * never reach non-coprime code if p = 0 (5).
#  * obviously the kernel is normal
#  * if we have a group that's in a point stabiliser but not in the
#  * kernel then we'll need to select one conjugacy class from 5, so will
#  * need an outer element.
#  * we will always choose an outer element of order two that is not in
#  * the kernel - this will always act in the same way as duality (tho'
#  * it could be a suitable power of the field aut).

NonCoprimeWhichGroup@:=function(quot,groupquot,delta,phi,iota,p)
local in_kernel,in_stab,invol,is_novelty,kernel,stab;
  is_novelty:=not IsSubset(SubStructure(quot,delta,#TODO CLOSURE
    phi),groupquot);
  stab:=SubStructure(quot,phi,#TODO CLOSURE
    iota);
  in_stab:=t:=ForAny([0..4],i->IsSubset(stab^(delta^i),groupquot));
  if p mod 5=1 then
    kernel:=SubStructure(quot,phi);
  elif (p mod 5=2) or (p mod 5=3) then
    kernel:=SubStructure(quot,phi^4,#TODO CLOSURE
      phi^2*iota);
  elif (p mod 5=4) then
    kernel:=SubStructure(quot,phi^2,#TODO CLOSURE
      phi*iota);
  fi;
  in_kernel:=IsSubset(kernel,groupquot);
  if in_stab and not in_kernel then
    invol:=Random(groupquot);
    while (invol in kernel) or (not Order(invol)=2) do
      invol:=Random(groupquot);
    od;
  else
    invol:=Identity(groupquot);
  fi;
  return rec(val1:=is_novelty,
    val2:=in_kernel,
    val3:=in_stab,
    val4:=invol);
end;
;
#  **************************************************************
#  This makes those maximal subgroups when q neq 1 (mod 5)
CoprimeMaximals@:=function(p,e,factor,is_novelty,Print)
local f,fac,maximals,q,so,x;
  q:=p^e;
  maximals:=[];
  if Print > 1 then
    Info(InfoWarning,1,"getting reducibles");
  fi;
  if not is_novelty then
    Add(maximals,(SLPointStab@(5,q)@factor));
    Add(maximals,(SLStabOfNSpace@(5,q,2)@factor));
    Add(maximals,(SLStabOfNSpace@(5,q,3)@factor));
    Add(maximals,(SLStabOfNSpace@(5,q,4)@factor));
  else
    Add(maximals,(SLStabOfNSpaceMeetDual@(5,q,1)@factor));
    Add(maximals,(SLStabOfNSpaceMissDual@(5,q,1)@factor));
    Add(maximals,(SLStabOfNSpaceMeetDual@(5,q,2)@factor));
    Add(maximals,(SLStabOfNSpaceMissDual@(5,q,2)@factor));
  fi;
  if Print > 1 then
    Info(InfoWarning,1,"getting imprimitives");
  fi;
  if q > 4 then
    Add(maximals,(ImprimsMeetSL@(5,q,5)@factor));
  fi;
  if Print > 1 then
    Info(InfoWarning,1,"getting superfield");
  fi;
  Add(maximals,(GammaLMeetSL@(5,q,5)@factor));
  if Print > 1 then
    Info(InfoWarning,1,"getting subfields");
  fi;
  fac:=CollectedFactors(e);
  for x in fac do
    f:=QuoInt(e,x[1]);
    Add(maximals,(SubStructure(SL(5,q),Eltseq(SL(5,p^f).1),#TODO CLOSURE
      Eltseq(SL(5,p^f).2))@factor));
  od;
  if IsOddInt(p) then
    if Print > 1 then
      Info(InfoWarning,1,"getting orthogonal");
    fi;
    so:=SubStructure(SL(5,q),SO(5,q));
    Add(maximals,so@factor);
  fi;
  if IsEvenInt(e) then
    if Print > 1 then
      Info(InfoWarning,1,"getting unitary");
    fi;
    Add(maximals,(SU(5,p^(QuoInt(e,2)))@factor));
  fi;
  return maximals;
end;
;
#  ******************************************************************
#  makes maximals when (p^e-1, 5) = 5.
NonCoprimeMaximals@:=function(p,e,factor,psl,is_novelty,in_kernel,in_stab,invol,
 Print)
local diag,f,fac,groups,maximals,q,sl,so,su,x;
  Assert(1,IsPrimeInt(p));
  q:=p^e;
  Assert(1,q mod 5=1);
  diag:=GL(5,q).1@factor;
  maximals:=[];
  if Print > 1 then
    Info(InfoWarning,1,"getting reducibles");
  fi;
  if not is_novelty then
    Add(maximals,(SLPointStab@(5,q)@factor));
    Add(maximals,(SLStabOfNSpace@(5,q,2)@factor));
    Add(maximals,(SLStabOfNSpace@(5,q,3)@factor));
    Add(maximals,(SLStabOfNSpace@(5,q,4)@factor));
  else
    Add(maximals,(SLStabOfNSpaceMeetDual@(5,q,1)@factor));
    Add(maximals,(SLStabOfNSpaceMissDual@(5,q,1)@factor));
    Add(maximals,(SLStabOfNSpaceMeetDual@(5,q,2)@factor));
    Add(maximals,(SLStabOfNSpaceMissDual@(5,q,2)@factor));
  fi;
  if Print > 1 then
    Info(InfoWarning,1,"getting imprimitive");
  fi;
  Add(maximals,(ImprimsMeetSL@(5,q,5)@factor));
  if Print > 1 then
    Info(InfoWarning,1,"getting semilinear");
  fi;
  Add(maximals,(GammaLMeetSL@(5,q,5)@factor));
  if Print > 1 then
    Info(InfoWarning,1,"getting subfield groups");
  fi;
  fac:=CollectedFactors(e);
  for x in fac do
    f:=QuoInt(e,x[1]);
    if (x[1]=2 and (p^f mod 5)=4) or (x[1]=5) then
      if (in_kernel) then
        sl:=SubfieldSL@(5,p,e,f)@factor;
        groups:=ImageCopies@(sl,5,diag);
        maximals:=Concatenation(maximals,groups);
      elif in_stab and (not in_kernel) then
        sl:=SubfieldSL@(5,p,e,f)@factor;
        Add(maximals,SelectGroupGeneral@(psl,sl,diag,invol));
      fi;
    else
      Add(maximals,SubfieldSL@(5,p,e,f)@factor);
    fi;
  od;
  if in_stab and IsOddInt(q) then
    Info(InfoWarning,1,"getting orthogonal group");
    so:=SubStructure(SL(5,q),SO(5,q))@factor;
    if in_kernel then
      groups:=ImageCopies@(so,5,diag);
      maximals:=Concatenation(maximals,groups);
    else
      Add(maximals,SelectGroupGeneral@(psl,so,diag,invol));
    fi;
  fi;
  if IsEvenInt(e) then
    if not (p^(QuoInt(e,2)) mod 5=1) then
      Add(maximals,SubStructure(SL(5,q),SU(5,p^(QuoInt(e,2))))@factor);
    elif in_stab then
      su:=SubStructure(SL(5,q),SU(5,p^(QuoInt(e,2))))@factor;
      if in_kernel then
        groups:=ImageCopies@(su,5,diag);
        maximals:=Concatenation(maximals,groups);
      else
        Add(maximals,SelectGroupGeneral@(psl,su,diag,invol));
      fi;
    fi;
  fi;
  return maximals;
end;
;
#  ***************************************************************
#   The main function.
#  * Input: - a group isomorphic to an almost simple group with
#  *          socle PSL(5, q) for q \neq p,
#  *        - the prime power q
#  *        - a flag "max" (default true) to say whether we want
#  *          the maximals or just to do constructive recognition.
#  *        - a Print level (default 0) if > 1 we print stuff.
#  *
#  * Output: - 5 things. the third one is the maximal subgroups,
#  *           the others seem to be various homomorphisms.

InstallGlobalFunction(L5qIdentify@,
function(group,q)
local 
   F,Print,apsl,d,delta,e,fac,factor,g,gl,group,groupquot,homom,in_kernel,
   in_stab,invol,iota,is_novelty,max,maximals,newgens,ord_apsl,p,phi,phia,proj,
   psl,quot,sl,soc,subapsl;
  max:=ValueOption("max");
  if max=fail then
    max:=true;
  fi;
  Print:=ValueOption("Print");
  if Print=fail then
    Print:=0;
  fi;
  fac:=CollectedFactors(q);
  Assert(1,Size(fac)=1);
  p:=fac[1][1];
  e:=fac[1][2];
  Assert(1,e > 1);
  if Print > 1 then
    Print("Making standard group");
  fi;
  gl:=GL(5,p^e);
  sl:=SL(5,p^e);
  apsl:=PGammaL2@(5,p^e);
  factor:=GroupHomomorphismByImages(gl,apsl,
    apsl.1,apsl.2);
  psl:=sl@factor;
  if Print > 1 then
    Print("Setting up isomorphism");
  fi;
  # =v= MULTIASSIGN =v=
  group:=MakeHomomGeneral@(group,5,p,e,psl,apsl,factor:Print:=0);
  homom:=group.val1;
  soc:=group.val2;
  group:=group.val3;
  # =^= MULTIASSIGN =^=
  #   Set up the subgroup of the outer automorphism group induced by group
  if max then
    d:=Gcd(q-1,5);
    # =v= MULTIASSIGN =v=
    proj:=Subquo(apsl,[psl]);
    quot:=proj.val1;
    proj:=proj.val2;
    # =^= MULTIASSIGN =^=
    delta:=proj(apsl.1);
    Assert(1,Order(delta)=d);
    #  diagonal aut.
    phia:=proj(apsl.3);
    Assert(1,Order(phia)=e);
    #  field aut.
    #  had used phi twice!
    iota:=proj(apsl.4);
    Assert(1,Order(iota)=2);
    #  graph aut
    newgens:=List([1..Ngens(group)],i->group.i@homom);
    groupquot:=SubStructure(quot,List(newgens,g->proj(g)));
  fi;
  if Print > 1 then
    Print("Calling FPGroupStrong");
  fi;
  # =v= MULTIASSIGN =v=
  phi:=FPGroupStrong(SubStructure(psl,List([1..Ngens(soc)],i->soc.i@homom)));
  F:=phi.val1;
  phi:=phi.val2;
  # =^= MULTIASSIGN =^=
  if Print > 2 then
    Print("minimising generators");
  fi;
  #  get apsl right
  ord_apsl:=Order(apsl);
  newgens:=List([1..Ngens(group)],i->group.i@homom);
  subapsl:=SubStructure(apsl,newgens);
  RandomSchreier(subapsl);
  for g in Generators(apsl) do
    if not g in subapsl then
      Add(newgens,g);
      subapsl:=SubStructure(apsl,newgens);
      RandomSchreier(subapsl);
    fi;
  od;
  apsl:=SubStructure(apsl,subapsl);
  apsl.Order:=ord_apsl;
  if not max then
    return rec(val1:=homom,
      val2:=apsl,
      val3:=[],
      val4:=F,
      val5:=phi);
  fi;
  if d=1 then
    is_novelty:=CoprimeWhichGroup@(quot,groupquot,phia);
    if Print > 1 then
      Print("is novelty =",is_novelty);
    fi;
    maximals:=CoprimeMaximals@(p,e,factor,is_novelty,Print);
  elif d=5 then
    # =v= MULTIASSIGN =v=
    invol:=NonCoprimeWhichGroup@(quot,groupquot,delta,phia,iota,p);
    is_novelty:=invol.val1;
    in_kernel:=invol.val2;
    in_stab:=invol.val3;
    invol:=invol.val4;
    # =^= MULTIASSIGN =^=
    if Print > 1 then
      Print("is novelty =",is_novelty,"in_kernel =",in_kernel);
      Print("in_stab =",in_stab);
    fi;
    invol:=invol@@proj;
    maximals:=NonCoprimeMaximals@(p,e,factor,psl,is_novelty,in_kernel,in_stab,
     invol,Print);
  fi;
  return rec(val1:=homom,
    val2:=apsl,
    val3:=maximals,
    val4:=F,
    val5:=phi);
end);



#  File converted from Magma code -- requires editing and checking
#  Magma -> GAP converter, version 0.43, 4/04/16 by AH

#  Global Variables used: Append, Centraliser, FPGroupStrong, Generators, Id,
#  Index, IsConjugate, Ngens, Order, Random, RandomProcess, Socle, Sym,
#  get_standard_gens_op102, homom

#  Defines: Op102Identify, get_standard_gens_op102

DeclareGlobalFunction("Op102Identify@");

#  
#  Maximal subgroups of  O+(10,2) and its aut group.
#  Based on information in the Birmingham Atlas of Group Representations
#  as at 18/2/04.
#  
#  Bill Unger, 18/2/04

get_standard_gens_op102@:=function(G)
local P,a,b,x;
  P:=RandomProcess(G);
  repeat
    x:=Random(P);
    
  until Order(x)=60;
  #   1 in 30
  a:=x^30;
  #   a in 2A
  b:=x^3;
  #   b in 20A
  repeat
    b:=b^Random(P);
    
  until Order(a*b)=21;
  #   32 in 1581, near 1 in 49
  return rec(val1:=a,
    val2:=b);
end;
;
InstallGlobalFunction(Op102Identify@,
function(group)
local 
   CG,F,M,Print,S,a,aop102,aut,b,c,ce,g,ga,gb,group,h,homom,i,ims,isc,j,max,
   maximals,newgens,phi,simp,soc;
  max:=ValueOption("max");
  if max=fail then
    max:=true;
  fi;
  Print:=ValueOption("Print");
  if Print=fail then
    Print:=0;
  fi;
  S:=SymmetricGroup(496);
  a:=(2,170)(3,232)(4,340)(8,455)(9,205)(10,306)(11,387)(12,156)(13,234)(14,85)
   (15,441)(16,89)(17,337)(19,272)(20,443)(22,70)(23,459)(24,484)(25,226)
   (27,469)(28,445)(29,399)(30,473)(31,458)(32,460)(35,269)(38,280)(41,307)
   (43,152)(44,380)(45,357)(48,360)(49,444)(50,422)(53,240)(54,194)(55,410)
   (56,206)(57,298)(58,263)(59,171)(60,456)(61,419)(62,142)(63,197)(64,468)
   (65,74)(66,71)(67,471)(69,496)(72,293)(73,463)(75,262)(76,368)(77,79)(78,148)
   (80,371)(81,162)(82,349)(83,145)(84,491)(86,136)(87,210)(88,225)(90,431)
   (91,467)(93,165)(94,132)(95,140)(96,466)(97,246)(98,119)(99,331)(101,104)
   (102,199)(103,239)(105,429)(107,332)(108,243)(109,228)(112,483)(116,141)
   (117,442)(122,259)(125,237)(126,160)(127,433)(128,164)(129,297)(130,216)
   (133,398)(135,286)(137,266)(138,242)(139,277)(143,373)(144,218)(146,312)
   (147,403)(149,258)(150,470)(151,439)(153,256)(154,230)(157,355)(158,402)
   (159,341)(161,343)(168,461)(169,196)(172,414)(173,214)(174,383)(175,348)
   (177,270)(178,224)(181,400)(185,344)(186,289)(190,465)(191,477)(193,396)
   (198,309)(200,326)(201,244)(202,369)(207,479)(208,489)(209,221)(211,352)
   (212,438)(217,334)(220,317)(222,366)(227,393)(229,338)(231,492)(233,374)
   (235,328)(236,476)(238,257)(241,247)(245,424)(250,339)(251,421)(252,404)
   (254,408)(255,364)(261,430)(265,412)(267,333)(268,386)(275,453)(276,379)
   (283,350)(284,346)(285,321)(287,449)(290,474)(291,475)(294,378)(296,409)
   (299,305)(300,486)(301,482)(302,376)(303,397)(308,417)(310,480)(311,488)
   (314,324)(319,415)(325,454)(327,432)(329,391)(330,416)(335,405)(342,372)
   (347,384)(358,427)(363,493)(370,428)(375,382)(377,394)(385,495)(388,490)
   (389,451)(395,462)(406,420)(418,485)(434,448)(436,452) #CAST S
    ;
  b:=(1,115,187,144,159)
   (2,366,331,83,437,236,24,368,375,468,416,307,438,98,335,377,202,455,35,271)
   (3,216,241,39,107,51,429,272,337,369,53,156,423,28,114,117,407,67,342,266)
   (4,494,449,251,257,285,92,214,255,68,433,168,428,311,47,417,265,327,12,77)
   (5,310,322,99,395,133,262,338,270,127,220,336,74,90,389,124,42,345,10,492)
   (6,370,243,231,436,78,356,330,94,459,30,303,295,340,399,154,305,227,34,487)
   (7,54,317,59,284,352,244,267,278,489)
   (8,131,15,358,396,138,321,103,288,112,268,218,323,29,33,248,63,196,44,420)
   (9,447,475,38,354,486,188,16,496,371,41,346,488,43,157,495,283,147,329,179)
   (11,91,87,300,175,334,240,190,22,177,273,318,413,60,192,139,93,424,204,376)
   (13,296,65,390,297,316,118,289,467,80)(14,355,298,454,461,320,79,113,422,286)
   (17,451,483,312,40,282,120,171,400,89,164,151,339,444,162,211,374,274,26,357)
   (18,23)(19,55,324,69)(20,332,32,233,160)(21,280,326,178)
   (25,95,432,372,119,384,205,150,349,482,343,313,56,128,142,52,222,381,279,365)
   (27,477,72,125,408,110,276,223,230,309,203,176,106,263,448,97,260,325,86,226)
   (31,134,239,430,84,234,427,409,155,221,207,256,172,474,351,167,452,478,341,
   463)(36,412,405,238,469,109,229,199,235,415)
   (37,314,48,367,261,102,224,170,392,148,208,471,465,319,61,111,152,393,194,
   136)(45,130,403,364)(46,96,122,181,362)
   (49,328,217,388,385,397,129,275,66,484,373,481,363,254,456,287,292,269,209,
   137)(50,361,426,333)
   (57,182,315,411,418,458,58,232,410,166,180,126,85,225,394,378,258,165,391,
   466)
   (62,302,472,183,161,277,76,201,163,73,145,306,141,186,198,493,386,121,135,71)
   (64,195,246,441,193,350,82,116,425,281)(70,491,132,464,348)(75,101)
   (81,108,301,304,200)(88,383,184,387,299)
   (100,237,146,485,462,123,419,173,245,197,104,149,143,476,439,158,290,206,360,
   308)(105,210,253,470,247)(140,347,264,473,242)(153,219)(169,457,414,228)
   (174,291,440,421)(185,293,249,401,450,189,398,252,442,445)(191,402)
   (212,479,359,460,382,213,344,250,434,353,431,294,404,435,453,443,446,406,490,
   259)(215,380)(379,480) #CAST S
    ;
  c:=(2,4)(3,6)(5,10)(7,13)(8,15)(11,21)(12,24)(17,31)(19,35)(22,40)(25,44)
   (27,47)(29,52)(30,53)(33,56)(37,61)(42,66)(46,70)(49,74)(50,76)(51,78)(54,80)
   (55,83)(58,85)(60,89)(68,97)(69,98)(71,100)(73,104)(77,110)(79,113)(81,115)
   (82,116)(87,120)(88,122)(90,124)(96,132)(99,133)(102,136)(103,138)(105,140)
   (108,144)(111,148)(112,150)(117,154)(123,161)(126,165)(135,173)(139,178)
   (143,183)(146,186)(149,188)(151,190)(158,198)(162,204)(163,206)(164,207)
   (167,211)(169,213)(182,232)(184,233)(185,235)(189,238)(195,246)(196,248)
   (200,253)(202,255)(203,257)(208,261)(209,262)(210,264)(212,228)(220,270)
   (234,282)(236,285)(237,283)(244,297)(247,301)(250,305)(251,307)(254,310)
   (258,315)(268,323)(273,326)(280,334)(287,338)(288,343)(290,346)(298,355)
   (300,357)(302,333)(303,359)(306,361)(311,366)(316,352)(322,373)(324,375)
   (332,383)(336,388)(345,397)(356,406)(358,384)(362,387)(370,404)(374,413)
   (377,417)(381,420)(386,426)(396,432)(399,435)(414,443)(415,445)(416,433)
   (419,447)(424,451)(431,457)(434,459)(436,460)(450,469)(487,490) #CAST S
    ;
  simp:=SubStructure(S,a,#TODO CLOSURE
    b);
  simp.Order:=23499295948800;
  # =v= MULTIASSIGN =v=
  phi:=FPGroupStrong(simp);
  F:=phi.val1;
  phi:=phi.val2;
  # =^= MULTIASSIGN =^=
  soc:=Socle(group);
  aut:=Index(group,soc);
  if Print > 1 then
    Print("group is O+(10,2):%o\n",aut);
  fi;
  # =v= MULTIASSIGN =v=
  gb:=get_standard_gens_op102@(soc);
  ga:=gb.val1;
  gb:=gb.val2;
  # =^= MULTIASSIGN =^=
  soc:=SubStructure(soc,ga,#TODO CLOSURE
    gb);
  soc.Order:=23499295948800;
  newgens:=[ga,gb];
  for g in Generators(group) do
    if not g in SubStructure(group,newgens) then
      Add(newgens,g);
    fi;
  od;
  group:=SubStructure(group,newgens);
  aop102:=SubStructure(S,a,#TODO CLOSURE
    b,c);
  ims:=[a,b];
  homom:=GroupHomomorphismByImages(soc,simp,
    GeneratorsOfGroup(soc),ims);
  for i in [Ngens(soc)+1..Ngens(group)] do
    g:=group.i;
    CG:=aop102;
    ce:=One(aop102);
    for j in [1..2] do
      # =v= MULTIASSIGN =v=
      h:=IsConjugate(CG,simp.j^ce,homom(soc.j^g));
      isc:=h.val1;
      h:=h.val2;
      # =^= MULTIASSIGN =^=
      if not isc then
        Error("Conjugation error in Aut(O+(10,2))");
      fi;
      CG:=Centraliser(CG,homom(soc.j^g));
      ce:=ce*h;
    od;
    Add(ims,ce);
  od;
  newgens:=ims;
  for g in Generators(aop102) do
    if not g in SubStructure(aop102,ims) then
      Add(ims,g);
    fi;
  od;
  aop102:=SubStructure(S,ims);
  homom:=GroupHomomorphismByImages(group,aop102,
    GeneratorsOfGroup(group),newgens);
  maximals:=[];
  if not max then
    return rec(val1:=homom,
      val2:=aop102,
      val3:=maximals,
      val4:=F,
      val5:=phi);
  fi;
  #  
  #  Maximal subgroups from Birmingham web page.
  #  If their list is complete then all the subgroups below are
  #  maximal subgroups and give one from each conjugacy class
  #  of maximal subgroups.
  
  #   maximals common to both auts first 
  #   S(8,2)
  M:=SubStructure(simp,a,#TODO CLOSURE
    b*a*b*a*b^3);
  M.Order:=47377612800;
  Add(maximals,M);
  #   2^8:O+(8,2)
  M:=SubStructure(simp,a,#TODO CLOSURE
    b^4*a*b^6*a*b^3);
  M.Order:=44590694400;
  Add(maximals,M);
  #   (3xO-(8,2):2
  M:=SubStructure(simp,b^-2*a*b*a*b*a*b^-1*a*b^-1*a*b^-3,#TODO CLOSURE
    a*b^-3*a*b^2*a*b^4*a*b^-2*a);
  M.Order:=1184440320;
  Add(maximals,M);
  #   2^(1+12):(S3 x A8)
  M:=SubStructure(simp,a^b,#TODO CLOSURE
    a*b*a*b*a*b^-1*a*b^-1*a,b*a*b^6*a*b^-2*a);
  M.Order:=990904320;
  Add(maximals,M);
  #   2^(3+12):(S3 x S3 x L(3,2))
  M:=SubStructure(simp,a^b,#TODO CLOSURE
    a*b*a*b^3*a*b^2*a*b^-2*a*b^-3*a*b^-1*a,
   a*b^-1*a*b^4*a*b^2*a*b^-1*a*b^2*a*b*a*b^-1,
   b*a*b^-1*a*b^-5*a*b^3*a*b^2*a*b*a*b^-1);
  M.Order:=198180864;
  Add(maximals,M);
  #   (A5 x U(4,2)):2
  M:=SubStructure(simp,b^-4*a*b^-1*a*b^-2*a*b^2*a*b*a*b^4,#TODO CLOSURE
    a*b^2*a*b^2*a*b^-1*a*b^-2*a*b^2*a*b^4,
   a*b^-2*a*b^-3*a*b^-1*a*b*a*b^3*a*b*a*b*a);
  M.Order:=3110400;
  Add(maximals,M);
  #   (S3 x S3 x A8):2
  M:=SubStructure(simp,b*a*b^5*a*b^4*a*b^-1*a*b^-2,#TODO CLOSURE
    a*b^2*a*b*a*b^6*a*b^3*a*b^-5*a*b^2);
  M.Order:=1451520;
  Add(maximals,M);
  #   now the maximals that depend on what auts are about 
  if aut=1 then
    #   2^10:L(5,2) twice
    M:=SubStructure(simp,a,#TODO CLOSURE
      b^2*a*b^-3);
    M.Order:=10239344640;
    Add(maximals,M);
    Add(maximals,M^c);
  else
    Assert(1,aut=2);
    #   [2^15]:A8, intersection with simple is 2^(6+4+4):A8
    M:=SubStructure(simp,b^-1*a*b^-1*a*b*a*b,#TODO CLOSURE
      b^-3*a*b^3,b^-1*a*b^4*a*b*a*b^2*a*b*a*b^-1*a);
    M.Order:=330301440;
    Add(maximals,M);
    #   L(5,2):2, intersection with simple is L(5,2)
    M:=SubStructure(simp,a,#TODO CLOSURE
      (1,375,212,393,405)(2,451,229,150,321)(3,11,8,55,26)(4,101,160,377,258)
     (5,304,45,22,283)(6,159,209,138,17)(7,308,221,125,214)(9,301,491,120,36)
     (10,40,410,288,485)(12,440,31,365,412)(13,44,455,458,68)
     (14,470,467,444,460)(15,350,437,195,427)(16,168,245,213,129)
     (18,63,431,84,317)(19,295,111,353,98)(20,126,419,378,198)
     (21,157,357,418,243)(23,256,290,72,406)(24,356,433,325,185)
     (25,355,127,232,289)(27,222,277,244,113)(28,268,206,300,161)
     (29,407,153,313,276)(30,453,345,310,403)(32,414,82,294,481)
     (33,273,71,376,134)(34,174,399,208,296)(35,52,381,454,477)
     (37,389,73,349,449)(38,191,461,248,435)(39,211,436,69,199)
     (41,154,193,47,135)(42,351,176,70,130)(43,462,347,336,284)
     (46,303,323,291,83)(48,309,137,57,326)(49,286,96,439,330)
     (50,247,87,203,493)(51,74,366,235,252)(53,148,182,60,270)
     (54,151,155,170,364)(56,464,386,314,139)(58,457,210,380,495)
     (59,79,293,217,109)(61,104,76,93,257)(62,207,369,264,417)
     (64,156,398,263,390)(65,306,489,421,163)(66,184,478,123,99)
     (67,482,269,494,279)(75,92,312,90,80)(77,285,456,86,476)
     (78,486,334,346,469)(81,165,363,492,105)(85,367,238,107,333)
     (88,445,341,342,384)(89,371,370,167,218)(91,200,443,368,231)
     (94,428,173,396,250)(95,344,465,354,432)(97,409,220,225,420)
     (100,297,223,374,452)(102,339,335,424,202)(103,242,359,472,152)
     (106,136,140,400,287)(108,180,305,358,240)(110,402,119,194,188)
     (112,158,164,338,189)(114,116,196,166,488)(115,241,205,274,348)
     (117,307,413,144,426)(118,319,254,143,404)(121,401,448,239,237)
     (122,331,265,320,411)(124,177,441,395,282)(128,463,278,190,253)
     (131,447,169,302,496)(132,262,337,416,246)(133,360,450,275,145)
     (141,468,315,480,422)(142,219,382,204,373)(146,332,442,466,271)
     (147,385,266,487,162)(149,425,267,172,322)(171,408,379,201,423)
     (175,474,429,197,394)(178,475,249,362,388)(179,383,324,328,372)
     (181,329,260,228,490)(183,484,215,430,471)(186,483,299,327,236)
     (187,415,387,227,251)(192,281,434,216,479)(224,233,316,361,280)
     (226,259,261,234,446)(230,292,318,255,272)(298,459,397,340,391)
     (311,438,473,352,392));
    M.Order:=9999360;
    Add(maximals,M);
  fi;
  return rec(val1:=homom,
    val2:=aop102,
    val3:=maximals,
    val4:=F,
    val5:=phi);
end);


